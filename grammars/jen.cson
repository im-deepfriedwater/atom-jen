scopeName: 'source.jen'
name: 'jen'
fileTypes: [
  'jen'
]
limitLineLength: false
patterns: [
  {
    name: 'comment.line.jen'
    match: ';.*$'
  }

  {
    name: 'constant.numeric.jen'
    match: '[0-9]+(.[0-9]+)?'
  }

  {
    name: 'constant.language.jen'
    match: '(ok|err|true|false)'
  }

  {
    name: 'keyword.other.jen'
    match: '\\b(type|case|of|in|for|while)\\b'
  }

  {
    name: 'keyword.control.jen'
    match: '\\b(if|else|return|break)'
  }

  {
    comment: 'Refers to list types in jen.'
    name: 'support.type.jen'
    match: '\\blist [a-z]*'
  }

  {
    comment: 'Refers to built-in types in jen.'
    name: 'support.type.jen'
    match: '\\b(number|error|string|boolean|any|void)\\b'
  }

  {
    comment: 'Arithmetic operators.'
    name: 'keyword.operator.jen'
    match: '\\+|\\-|\\*|/|/%|\\^|%'
  }

  {
    comment: 'Assignment operators.'
    name: 'keyword.operator.assignment.jen'
    match: '=|:='
  }

  {
    begin: '(//?)'
    beginCaptures:
      1:
        name: 'keyword.operator.ternary.jen'
    end: '(:)'
    endCaptures:
      1:
        name: 'keyword.operator.ternary.jen'
  }

  {
    begin: '([\\w]+)\\s*(?=\\()'
    beginCaptures:
      1:
        patterns: [
          {
            match: '[a-zA-Z_][\\w]*'
            name: 'entity.name.function.jen'
          }

          {
            match: '\\d[\\w]*'
            name: 'invalid.illegal.identifier.jen'
          }
        ]
    end: '(?<=\\))'
    name: 'meta.function-call.jen'
  }
]
